// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/lb_agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadBalancerAgent_AddBinding_FullMethodName          = "/proto.LoadBalancerAgent/AddBinding"
	LoadBalancerAgent_DeleteBinding_FullMethodName       = "/proto.LoadBalancerAgent/DeleteBinding"
	LoadBalancerAgent_AddBackendServer_FullMethodName    = "/proto.LoadBalancerAgent/AddBackendServer"
	LoadBalancerAgent_DeleteBackendServer_FullMethodName = "/proto.LoadBalancerAgent/DeleteBackendServer"
	LoadBalancerAgent_TrackSocks_FullMethodName          = "/proto.LoadBalancerAgent/TrackSocks"
)

// LoadBalancerAgentClient is the client API for LoadBalancerAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalancerAgentClient interface {
	AddBinding(ctx context.Context, in *AddBindingRequest, opts ...grpc.CallOption) (*GenericReply, error)
	DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*GenericReply, error)
	AddBackendServer(ctx context.Context, in *AddBackendServerRequest, opts ...grpc.CallOption) (*GenericReply, error)
	DeleteBackendServer(ctx context.Context, in *DeleteBackendServerRequest, opts ...grpc.CallOption) (*GenericReply, error)
	TrackSocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SocksReply, error)
}

type loadBalancerAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancerAgentClient(cc grpc.ClientConnInterface) LoadBalancerAgentClient {
	return &loadBalancerAgentClient{cc}
}

func (c *loadBalancerAgentClient) AddBinding(ctx context.Context, in *AddBindingRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, LoadBalancerAgent_AddBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerAgentClient) DeleteBinding(ctx context.Context, in *DeleteBindingRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, LoadBalancerAgent_DeleteBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerAgentClient) AddBackendServer(ctx context.Context, in *AddBackendServerRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, LoadBalancerAgent_AddBackendServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerAgentClient) DeleteBackendServer(ctx context.Context, in *DeleteBackendServerRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, LoadBalancerAgent_DeleteBackendServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerAgentClient) TrackSocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SocksReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SocksReply)
	err := c.cc.Invoke(ctx, LoadBalancerAgent_TrackSocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerAgentServer is the server API for LoadBalancerAgent service.
// All implementations must embed UnimplementedLoadBalancerAgentServer
// for forward compatibility.
type LoadBalancerAgentServer interface {
	AddBinding(context.Context, *AddBindingRequest) (*GenericReply, error)
	DeleteBinding(context.Context, *DeleteBindingRequest) (*GenericReply, error)
	AddBackendServer(context.Context, *AddBackendServerRequest) (*GenericReply, error)
	DeleteBackendServer(context.Context, *DeleteBackendServerRequest) (*GenericReply, error)
	TrackSocks(context.Context, *emptypb.Empty) (*SocksReply, error)
	mustEmbedUnimplementedLoadBalancerAgentServer()
}

// UnimplementedLoadBalancerAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalancerAgentServer struct{}

func (UnimplementedLoadBalancerAgentServer) AddBinding(context.Context, *AddBindingRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinding not implemented")
}
func (UnimplementedLoadBalancerAgentServer) DeleteBinding(context.Context, *DeleteBindingRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinding not implemented")
}
func (UnimplementedLoadBalancerAgentServer) AddBackendServer(context.Context, *AddBackendServerRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackendServer not implemented")
}
func (UnimplementedLoadBalancerAgentServer) DeleteBackendServer(context.Context, *DeleteBackendServerRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackendServer not implemented")
}
func (UnimplementedLoadBalancerAgentServer) TrackSocks(context.Context, *emptypb.Empty) (*SocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackSocks not implemented")
}
func (UnimplementedLoadBalancerAgentServer) mustEmbedUnimplementedLoadBalancerAgentServer() {}
func (UnimplementedLoadBalancerAgentServer) testEmbeddedByValue()                           {}

// UnsafeLoadBalancerAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancerAgentServer will
// result in compilation errors.
type UnsafeLoadBalancerAgentServer interface {
	mustEmbedUnimplementedLoadBalancerAgentServer()
}

func RegisterLoadBalancerAgentServer(s grpc.ServiceRegistrar, srv LoadBalancerAgentServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalancerAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalancerAgent_ServiceDesc, srv)
}

func _LoadBalancerAgent_AddBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerAgentServer).AddBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancerAgent_AddBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerAgentServer).AddBinding(ctx, req.(*AddBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerAgent_DeleteBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerAgentServer).DeleteBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancerAgent_DeleteBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerAgentServer).DeleteBinding(ctx, req.(*DeleteBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerAgent_AddBackendServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBackendServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerAgentServer).AddBackendServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancerAgent_AddBackendServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerAgentServer).AddBackendServer(ctx, req.(*AddBackendServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerAgent_DeleteBackendServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerAgentServer).DeleteBackendServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancerAgent_DeleteBackendServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerAgentServer).DeleteBackendServer(ctx, req.(*DeleteBackendServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerAgent_TrackSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerAgentServer).TrackSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancerAgent_TrackSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerAgentServer).TrackSocks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalancerAgent_ServiceDesc is the grpc.ServiceDesc for LoadBalancerAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalancerAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoadBalancerAgent",
	HandlerType: (*LoadBalancerAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBinding",
			Handler:    _LoadBalancerAgent_AddBinding_Handler,
		},
		{
			MethodName: "DeleteBinding",
			Handler:    _LoadBalancerAgent_DeleteBinding_Handler,
		},
		{
			MethodName: "AddBackendServer",
			Handler:    _LoadBalancerAgent_AddBackendServer_Handler,
		},
		{
			MethodName: "DeleteBackendServer",
			Handler:    _LoadBalancerAgent_DeleteBackendServer_Handler,
		},
		{
			MethodName: "TrackSocks",
			Handler:    _LoadBalancerAgent_TrackSocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lb_agent.proto",
}
